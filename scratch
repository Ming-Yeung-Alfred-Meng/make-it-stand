  inner_carving.cpp
  // initialize an empty voxel grid
  //    using igl::voxel_grid.h
  // initialize center of mass
  //    using center_of_mass for outer mesh only version
  // initialize energy
  //                  initialize priority queue
  //                  rank from largest to smallest distances
  //                  insert filled voxel centers
  //                      priority of voxel centers calculated according to current plane
  // initialize an array of indices of grid point that are within a distance from hull
  //   filter out indices of voxels not within a distance from the hull
  // sort the array using custom comparator
  //    sort according the plane defined for this iteration
  // run (first) iteration:
  //    make a copy of the energy
  //    extract indices of filled voxels from the sorted array one by one (second iteration),
  //                  insert voxel center into a queue
  //      fetch corner using the index
  //      update new center of mass
  //      calculate new energy
  //      keep track of thickness energy seen so far
  //      keep track of the iteration where thickness energy occurred
  //    end carving (second iteration) when all voxels with positive distance are evaluated
  //    if new energy is greater or equal to the copy of energy or the number of voxels carved is too few,
  //      exit (first iteration)
  //    else,
  //                        initialize a new
  //                          extract all voxels that remained filled into a new priority queue
  //      sort the remaining indices in the array by new comparator based on new center of mass
  //    currently it is unsure if returning the optimized energy is necessary
  // use the iteration number where the optimized energy occurred to locate the last carved voxel
  // use the index and array of index to construct the -1, 0, 1 inside-outside grid vector
  // use dual_contour to construct inner mesh


  //std::function<int (Eigen::Vector3d &)> inside_outside(
  //  const int int_out[],
  //  const Eigen::Vector3d &min_corner,
  //  const Eigen::Vector3d &max_corner,
  //  const double step)
  //{
  //  return [&](Eigen::Vector3d &query)
  //    {
  //      if (query[0] <= min_corner[0] ||
  //          query[1] <= min_corner[1] ||
  //          query[2] <= min_corner[2] ||
  //          query[0] >= max_corner[0] ||
  //          query[1] >= max_corner[2] ||
  //          query[2] >= max_corner[1]) {
  //        return 1;
  //      }
  //
  //      int x_index = floor((query[0] - min_corner[0]) / step);
  //      int y_index = floor((query[1] - min_corner[1]) / step);
  //      int z_index = floor((query[2] - min_corner[2]) / step);
  //
  //      // you need to be able to detect if query is on the surface,
  //      // so you need to allow for numerical errors.
  //
  //      return 1;
  //    };
  //}


  update_center_of_mass()
  // new CoM = old CoM - (density / 24*m) * contribution of oriented triangular faces
  // equivalently, CoM -= (density / 24*m) * contribution of oriented inner faces
  // CoM += (density / 24*m) * contribution of oppositely oriented inner faces

  // find the corners of the voxel
  // divide CoM by (density / 24*m)
  // subtract mass of voxel from m
  // add contribution of voxel vertices to CoM
  //    a dot product multiplied by helper_g
  // multiply CoM by (density / 24*m), where m is the new m

  // construct the mesh of the voxel using cube.cpp
  // divide CoM by (density / 24*old_mass)
  // minus contribution of the oriented faces of the voxel mesh
  // multiply CoM by (density / 24*new_m)


face_contribution_to_com()
  // loop through each face
  //    fetch each vertex of the face from V
  //    compute contribution
  //    add it to con


 update_lbs_matrix
    // loop through each row
    //  fill every 4th slot of the corresponding row of V
    //  weight of each (i, j) block is W(i, j)


 my_lbs_matrix
   // compute bbw
   // initialize a matrix of all 0s
   // fill in 1s in the appropriate places

     // go through each row, if that row id by mod 3, if 0, insert 1 at column 4 * j
     // 1, insert at column 4 * j + 1, 2 then 4 * j + 2

   // apply the weights
   // use update lbs_matrix to fill in the vertex positions


voxel_indices

//  Eigen::RowVectorXd S;
//  Eigen::RowVectorXd I;
//  Eigen::MatrixXd C;
//  Eigen::MatrixXd N;
//
//  for (int i = 0; i < grid.rows(); ++i) {
//    igl::signed_distance(grid.row(i), MoV, MoF, igl::SIGNED_DISTANCE_TYPE_FAST_WINDING_NUMBER, S, I, C, N);
//
//    std::cerr << "S:\n" << S << std::endl;
//
//    if (S(0) <= 0 && std::abs(S(0)) >= min) {
//      indices.emplace_back(i);
//    }
//  }

  // go through each point in grid
  // call signed_distance
  // if sign is correct/within hull and abs distance is greater than min, put its index into indices vector

laplacian
    // go through every face,
    // for each, loop through the three edges,
    // for each edge, at the contributions to the vertex index location into lap

mass_grad

  // go over every face
  //  for each vertex, take the derivative of the face's contribution wrt that vertex
  //  add the derivative wrt each coordinate of the vertex into the appropriate slot of grad

  // and use mod to calculate indices into F.


mass
  //    mass += (vj - vi).cross(vk - vi).normalized()(0) * (vi + vj + vk)(0); // not this
  //    mass += (vj - vi).cross(vk - vi).normalized().dot((vi + vj + vk)); // not this

mass_center_of_mass_grad

  // go through each face
  //  go through each vertex
  //   retrieve the vertices
  //   add the 3 by 3 gradient matrix

main
  //  Eigen::MatrixXd m(3, 3);
  //  m << 1, 2, 3, 4, 5, 6, 7, 8, 9;
  //
  //  Eigen::Vector3d v(1, 2, 3);
  //  Eigen::RowVector3d r(1, 2, 3);
  //
  //  std::cout << "v * r:\n" << v * r << std::endl;
  //
  //  std::cout << "m - v * r:\n" << m - v * r << std::endl;
  //  std::cout << 12. / 4. / 3. << std::endl;
  //  Eigen::MatrixXd m(3, 3);
  //  m.setZero();
  //  std::cout << "m:\n" << m << std::endl;
  //  m << 1, 1, 1, 1, 1, 1, 1, 1, 1;
  //  std::cout << "m:\n" << m << std::endl;
  //  m << 2, 2, 2, 2, 2, 2, 2, 2, 2;
  //  std::cout << "m:\n" << m << std::endl;
  //
  //  std::cout << "m.size():\n" << m.size() << std::endl;
  //  Eigen::VectorXd v(5);
  //  v << 1, 1, 1, 1, 1;

  //  Eigen::MatrixXd V(1, 3);
  //  V << 1, 2, 3;
  //
  //  Eigen::MatrixXd m = Eigen::Matrix<double, 10, 10>::Zero();

  //  std::cout << "m:\n" << m << std::endl;
  //
  //  m.block(1, 1, 3, 3).setIdentity();
  //  std::cout << "m:\n" << m << std::endl;
  ////  m.block(1, 4, 3, 1) = v.segment(1, 3);
  //  m.block(1, 4, 3, 1) = V.row(0).transpose();
  //  std::cout << "m:\n" << m << std::endl;
  //  m.block(1, 1, 3, 4) *= 2;
  //  std::cout << "m:\n" << m << std::endl;


  //  std::cout << "5 / 3 = " << 5 / 3 << std::endl;
  //  Eigen::VectorXd V(5);
  //
  //  std::cout << "V.rows() = " << V.rows() << std::endl;
  //  std::cout << "V.cols() = " << V.cols() << std::endl;
  //
  //  Eigen::MatrixXd M(5, 5);
  //  M(2, 2) = 5;
  //
  //  std::cout << "M before setZero():\n" << M << std::endl;
  //
  //  M.setZero();
  //
  //  std::cout << "M after setZero():\n" << M << std::endl;
  //
  //  Eigen::MatrixXd a;
  //  Eigen::MatrixXd b;
  //  Eigen::SparseMatrix<double> c;
  //  igl::lbs_matrix_column(a, b, c);

  //  const Eigen::RowVector3d orange(1.0,0.7,0.2);
  //  const Eigen::RowVector3d yellow(1.0,0.9,0.2);
  //  const Eigen::RowVector3d blue(0.2,0.3,0.8);
  //  const Eigen::RowVector3d green(0.2,0.6,0.3);
  //  const Eigen::RowVector3d red(1,0.0,0.0);
  //
  //  const Eigen::Vector3d contact(0.25, 0.5, 0);
  //  const int voxel_scale = 10;
  //  const int min_carve = 1;
  //  const double thickness = 0.1;
  //  const double density = 1;
  //  Eigen::MatrixXd MiV;
  //  Eigen::MatrixXi MiF;
  //  Eigen::MatrixXd V;
  //  Eigen::MatrixXi F;
  //
  //  Eigen::MatrixXd V2;
  //  Eigen::MatrixXi F2;
  //
  //  igl::opengl::glfw::Viewer viewer;
  //
  //  const auto & update = [&]()
  //  {
  ////      viewer.data().set_vertices(V);
  //      viewer.data().set_vertices(MiV);
  //      viewer.data().set_colors(blue);
  //
  //      viewer.data().compute_normals();
  //  };
  //
  //  igl::read_triangle_mesh(
  ////    (argc>1?argv[1]:"../data/decimated-knight.off"),V,F);
  ////    (argc>1?argv[1]:"../data/elephant.obj"),V,F);
  //    (argc>1?argv[1]:"../data/cube.obj"),V,F);
  //
  ////  std::cerr << "V:\n" << V << std::endl;
  ////  std::cerr << "F:\n" << F << std::endl;
  //
  //  inner_carving(V, F, contact, voxel_scale, min_carve, thickness, density, MiV, MiF);
  //
  ////  std::cerr << "MiV:\n" << MiV << std::endl;
  ////  std::cerr << "MiF:\n" << MiV << std::endl;
  //
  //  viewer.data().set_mesh(MiV,MiF);
  ////  viewer.data().set_mesh(V,F);
  ////  viewer.data().set_mesh(V2,F2);
  //  viewer.data().show_lines = false;
  //  viewer.core().is_animating = true;
  //  viewer.data().face_based = true;
  ////  update();
  //  viewer.launch();

  //  inner_carving(V, F, contact, voxel_scale, min_carve, thickness, density, MiV, MiF);

  //  viewer.data().set_mesh(MiV,MiF);
  //  viewer.data().set_colors(yellow);